# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

findPackage() {
  grep -rl "$1" /Users/sam/workspaces --include=composer.json
}

# All the dig info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}

function tinker() {
    if [ -z "$1" ]; then
        php artisan tinker
    else
        php artisan tinker --execute="dd($1);"
    fi
}

#shortcut voor zhs quick-look command
function ql() {
    quick-look "$1"
}

archive() {
    zip -r "$1".zip -i "$1"
}

function removehost() {
    ssh-keygen -R "$1"
}

alias mysqladm='mysql -u root'

# Scrape a single webpage with all assets
function scrapeUrl() {
    wget --adjust-extension --convert-links --page-requisites --span-hosts --no-host-directories "$1"
}

function gitExport() {
    for file in $(git diff --name-only $1 $2); do
        mkdir -p $(dirname "gitexport/$file")
        cp "$file" "gitexport/$file"
    done
}

#  Commit everything
function commit() {
    commitMessage="$*"

    git add .

    if [ "$commitMessage" = "" ]; then
        aicommits --all
        return
    fi

    eval "git commit -a -m '${commitMessage}'"
}

function push() {
    commitMessage="$*"

    git add .

    if [ "$commitMessage" = "" ]; then
        aicommits --all
        return
    fi

    eval "git commit -a -m '${commitMessage}'"
    git push
}

# brew install jq needed for this
function release() {
    composer_json="composer.json"
    new_version="$1"

    if [[ ! -f "$composer_json" ]]; then
        echo "‚ùå Ô∏èError: composer.json file not found."
        return 1
    fi

    if [[ -z "$new_version" ]]; then
        echo "‚úÖ Ô∏èIncrement composer version"

        current_version=$(jq -r '.version' "$composer_json")
        new_version=$(awk -F. -v OFS=. '{$NF++;print}' <<<"$current_version")
    else
        echo "‚úÖ Ô∏èUsing given version $new_version"
    fi

    jq --arg new_version "$new_version" '.version = $new_version' "$composer_json" >temp.json
    mv temp.json "$composer_json"

    echo "‚úÖ Add to git"

    git add . >/dev/null 2>&1
    git commit -m "New release $new_version" >/dev/null 2>&1
    git push >/dev/null 2>&1

    echo "‚úÖ Create new release"

    gh release create $new_version --generate-notes >/dev/null 2>&1

    echo "üöÄ Updated package from $current_version to $new_version"
}

function db {
    if [ "$1" = "refresh" ]; then
        mysql -uroot -h127.0.0.1 -e "drop database $2; create database $2"
    elif [ "$1" = "create" ]; then
        mysql -uroot -h127.0.0.1 -e "create database $2"
    elif [ "$1" = "drop" ]; then
        mysql -uroot -h127.0.0.1 -e "drop database $2"
    elif [ "$1" = "list" ]; then
        mysql -uroot -h127.0.0.1 -e "show databases" | perl -p -e's/\|| *//g'
    fi
}


function opendb() {
    [ ! -f .env ] && {
        echo "No .env file found."
        exit 1
    }

    DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

    DB_URL="${DB_CONNECTION}://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}"

    echo "Opening ${DB_URL}"
    open $DB_URL
}

function scheduler() {
    while :; do
        php artisan schedule:run
        echo "Sleeping 60 seconds..."
        sleep 60
    done
}

function silent() {
    "$@" >&/dev/null
}

function localPlugin() {
    for plugin in "$@"
    do
        rm -rf "plugins/$plugin"
        ln -s ~/workspaces/kirby/"$plugin" "plugins/$plugin"
        echo "‚úÖ Ô∏èPlugin '$plugin' replaced with the local version"
    done
}


function gitPlugin() {
    for plugin in "$@"
    do
        rm -rf "plugins/$plugin"
        echo "‚úÖ Ô∏èPlugin '$plugin' replaced with the git version"
    done
    composer install;
}

function commitPlugin() {
    cd "plugins/$1"
    git add .
    aicommits --all
    git push
    cd ../..
}

function pluginStatus() {
    cd "plugins/$1"
    git status
    cd ../..
}

function decrypt() {
    for file in ./*.gpg; do
        gpg --decrypt -o "${file%.*}" "$file"
    done
}
